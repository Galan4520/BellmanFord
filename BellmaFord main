#include<iostream>
#include <cstdlib>
#include <ctime>
using namespace std;
//Algoritmo Bellman-Ford
//En el main vamos a crear la matriz con sus respectivos valores

//Estructura de nodo con caracteristicas
//El número inicial referencial, el número destino y el peso
struct conexion {
	int NodoIn, NodoDes, NodoPeso;
};

struct Grafo {
	//Cantidad de vertices y la cantidad de conexión que existen en el grafo
	int vertice, conexion_nodos;
	conexion* NuvCon;
};
//Creamos la clase para crear nuestro grafo
struct Grafo* crearGrafo(int verticeAsig, int conexionAsig) {
	//Hacemos un puntero hacia los nuevos datos del nuevo grafo
	Grafo* nuevoGrafo = new Grafo();
	nuevoGrafo->vertice = verticeAsig;
	nuevoGrafo->conexion_nodos = conexionAsig;
	nuevoGrafo->NuvCon = new conexion[conexionAsig];
	return nuevoGrafo;
}
//Crear una función que imprima el arreglo
void imprimirArreglo(int Conexion[], int cantidadTotal) {
	cout << "Tabla de los vertices" << endl;
	for (int i = 0; i < cantidadTotal; i++) {
		cout << i << "  " << Conexion[i] << endl;
	}
}

//Algoritmo Bellman Ford
void Bellman_Ford(Grafo* GrafoNuevo, int NodoIn,int valores[]) {
	srand(time(0));
	clock_t t;
	t = clock();
	int Num = GrafoNuevo->vertice;
	int conexion_nodos = GrafoNuevo->conexion_nodos;
	//Paso 1 tenemos que inicializar todos al máximo, INT_MAX
	for (int i = 0; i < Num ; i++) {
		valores[i] = INT_MAX;
	}
	valores[NodoIn] = 0;
	//Paso 2 sumamos la distancia de los nodos hacia otro
	for (int i = 1; i <= Num - 1; i++) {
		for (int j = 0; j < conexion_nodos; j++) {
			int Origen = GrafoNuevo->NuvCon[j].NodoIn;
			int destino = GrafoNuevo->NuvCon[j].NodoDes;
			int pesoDeNodo = GrafoNuevo->NuvCon[j].NodoPeso;
			//Hacemos la condición para ver si el número es mayor hacia una ruta
			if (valores[Origen] != INT_MAX && valores[Origen] + pesoDeNodo < valores[destino]) {
				valores[destino] = valores[Origen] + pesoDeNodo;
			}
		}
	}
	//Paso 3 chequeamos que no se generen ciclo
	for (int i = 0; i < conexion_nodos; i++) {
		int Origen = GrafoNuevo->NuvCon[i].NodoIn;
		int destino = GrafoNuevo->NuvCon[i].NodoDes;
		int pesoDeNodo = GrafoNuevo->NuvCon[i].NodoPeso;
		if (valores[Origen] != INT_MAX && valores[Origen] + pesoDeNodo < valores[destino]) {
			cout << "Ciclo ... " << endl;
			return;
		}
	}
	imprimirArreglo(valores, Num);
	t = clock() - t;
	cout << "\nTiempo de ejecución de algoritmo: " << float(t) / CLOCKS_PER_SEC << " en segundos." << endl;
	return;
}
void TablaDevalor(Grafo* GrafoActual,int arr[],int posicion,int arr2[],int agrega ){
	int valor = 0;
	for (int i = 0; i < GrafoActual->conexion_nodos; i++) {
		if (GrafoActual->NuvCon[i].NodoIn == posicion) {
			arr[agrega] = GrafoActual->NuvCon[i].NodoPeso;
			arr2[agrega] = GrafoActual->NuvCon[i].NodoDes;
			agrega;
		}
	}	
}
void ImprimirTabla(Grafo* GrafoActual) {
	int valor = 0;
	for (int i = 0; i < GrafoActual->vertice; i++) {
		cout<<"  " << i << "  ";
		int arr[20];
		int arr2[20];
		
		TablaDevalor(GrafoActual,arr,i,arr2,0);	
		for (int j = 0; j < GrafoActual->vertice; j++) {
			if (j == i ) {
				cout << "  -  ";
			}
			if (arr2[valor] == j) {
				cout << "  "<<arr[j] << "  ";
				valor++;
			}
			else {
				cout << "  In  ";
			}
		}
		cout << endl;

	}
}
int main() {
	
	int vertice = 0;
	int conexion = 0;
	int NodoIn = 0;
	int NodoDes = 0;
	int NodoPeso = 0;
	cout << "Curso  Redes de la computación" << endl;
	cout << "Universidad de Lima" << endl;
	cout << "Algoritmo de Bellman-Ford" << endl;
	cout << "===================================================" << endl;
	cout << "Cantidad de vertices: " << endl;
	cin >> vertice;
	cout << "Canridad de conexión entre nodos" << endl;
	cin >> conexion;
	Grafo* grafonuevo = crearGrafo(vertice, conexion);
	int valores[100];
	for (int i = 0; i < conexion;i++) {
		cout << "Ingreso " << i+1 << endl;
		cout << "Ingrese el nodo inicio: " ;
		cin >> NodoIn;
		cout << "\nIngrese el nodo destino: " ;
		cin >> NodoDes;
		cout << "\nIngresa el coste: " ;
		cin >> NodoPeso;
		grafonuevo->NuvCon[i].NodoIn = NodoIn;
		grafonuevo->NuvCon[i].NodoDes = NodoDes;
		grafonuevo->NuvCon[i].NodoPeso = NodoPeso;
	}
	Bellman_Ford(grafonuevo, 0,valores);
	
	cout << endl; 
	//ImprimirTablaRelacion(grafonuevo);
	return 0;
}

